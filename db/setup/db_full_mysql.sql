DROP TABLE IF EXISTS AC_ROLE;
DROP TABLE IF EXISTS AC_USER_ACCT;
DROP TABLE IF EXISTS AC_USER_ACCT_H;
DROP TABLE IF EXISTS AC_USER_LOGIN_HIS;
DROP TABLE IF EXISTS AC_USER_ROLE_ASSIGN;
DROP TABLE IF EXISTS AC_USER_ROLE_ASSIGN_H;
DROP TABLE IF EXISTS CM_CONFIG;
DROP TABLE IF EXISTS CM_FILE_NET;
DROP TABLE IF EXISTS CM_ISSUE_RESOLUTION;
DROP TABLE IF EXISTS CM_ISSUE_STATUS;
DROP TABLE IF EXISTS CM_MASTER_CODE;
DROP TABLE IF EXISTS CM_SEQUENCE;
DROP TABLE IF EXISTS ISU_ISSUE;
DROP TABLE IF EXISTS ISU_ISSUE_HISTORY;
DROP TABLE IF EXISTS ISU_ATTACHMENT;
DROP TABLE IF EXISTS ISU_NOTE;
DROP TABLE IF EXISTS ISU_RELATIONSHIP;
DROP TABLE IF EXISTS ISU_FOLLOWER;
DROP TABLE IF EXISTS ISU_P_CONFIRMATION;
DROP TABLE IF EXISTS ISU_VCS_TRACKER;
DROP TABLE IF EXISTS ISU_SEARCH_FILTER;
DROP TABLE IF EXISTS PJT_PROJECT_GROUP;
DROP TABLE IF EXISTS PJT_PROJECT;
DROP TABLE IF EXISTS PJT_PROJECT_H;
DROP TABLE IF EXISTS PJT_MODULE;
DROP TABLE IF EXISTS PJT_USER_PROJECT_ASN;
DROP TABLE IF EXISTS PJT_USER_PROJECT_ASN_H;
DROP TABLE IF EXISTS SA_EMAIL_ARCHIVE;
DROP TABLE IF EXISTS GNL_COMMON_EVENT;
DROP TABLE IF EXISTS GNL_TIMESHEET;
DROP TABLE IF EXISTS GNL_EMAIL_REPLY_ATTACHMENT;
DROP TABLE IF EXISTS GNL_EMAIL_REPLY_OUTBOX;
DROP TABLE IF EXISTS GNL_EMAIL_REPLY_INBOX;
DROP TABLE IF EXISTS GNL_EMAIL_REPLY;
DROP TABLE IF EXISTS GNL_EMAIL_ATTACHMENT;
DROP TABLE IF EXISTS GNL_EMAIL_OUTBOX;
DROP TABLE IF EXISTS GNL_EMAIL_OUTBOX;
DROP TABLE IF EXISTS GNL_EMAIL;

CREATE TABLE AC_ROLE
(
    ID           VARCHAR(8) PRIMARY KEY,
    ROLE_NAME    VARCHAR(32)  NOT NULL,
    TYPE         CHAR(3)      NOT NULL,
    DESCRIPTION  VARCHAR(100),
    IS_SYSTEM    CHAR(1),
    LANDING_PAGE VARCHAR(512) NOT NULL,
    CREATED_AT   DATETIME     NOT NULL,
    CREATED_BY   VARCHAR(32)  NOT NULL,
    UPDATED_AT   DATETIME     NOT NULL,
    UPDATED_BY   VARCHAR(32)  NOT NULL
);

INSERT INTO AC_ROLE (ID, ROLE_NAME, TYPE, IS_SYSTEM, LANDING_PAGE, CREATED_AT, CREATED_BY,
                     UPDATED_AT, UPDATED_BY)
VALUES ('SYSADMIN', '系统管理员', 'SYS', 'Y', '/web/systemManagement/issueStatus', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO AC_ROLE (ID, ROLE_NAME, TYPE, IS_SYSTEM, LANDING_PAGE, CREATED_AT, CREATED_BY,
                     UPDATED_AT, UPDATED_BY)
VALUES ('DEV', '软件开发工程师', 'DEV', 'N', '/web/issue/view', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO AC_ROLE (ID, ROLE_NAME, TYPE, IS_SYSTEM, LANDING_PAGE, CREATED_AT, CREATED_BY,
                     UPDATED_AT, UPDATED_BY)
VALUES ('QA', '软件测试工程师', 'DEV', 'N', '/web/issue/view', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO AC_ROLE (ID, ROLE_NAME, TYPE, IS_SYSTEM, LANDING_PAGE, CREATED_AT, CREATED_BY,
                     UPDATED_AT, UPDATED_BY)
VALUES ('DEV_S', '开发主管', 'ADM', 'N', '/web/issue/view', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO AC_ROLE (ID, ROLE_NAME, TYPE, IS_SYSTEM, LANDING_PAGE, CREATED_AT, CREATED_BY,
                     UPDATED_AT, UPDATED_BY)
VALUES ('QA_S', '测试主管', 'ADM', 'N', '/web/issue/view', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO AC_ROLE (ID, ROLE_NAME, TYPE, IS_SYSTEM, LANDING_PAGE, CREATED_AT, CREATED_BY,
                     UPDATED_AT, UPDATED_BY)
VALUES ('EXT_PTY', '第三方', 'USR', 'N', '/web/index', NOW(), 'SYSTEM', NOW(), 'SYSTEM');


CREATE TABLE AC_USER_ACCT
(
    ID                    BIGINT PRIMARY KEY AUTO_INCREMENT,
    LOGIN_ID              VARCHAR(16) UNIQUE NOT NULL,
    DOMAIN                VARCHAR(12)        NOT NULL,
    NAME                  VARCHAR(24),
    DISPLAY_NAME          VARCHAR(32)        NOT NULL,
    PASSWORD              VARCHAR(256)       NOT NULL,
    EMAIL                 VARCHAR(64),
    PHONE_NO              VARCHAR(11),
    STATUS                CHAR(1)            NOT NULL,
    IS_FIRST_LOGIN        CHAR(1),
    IS_NEED_CHANGE_PWD    CHAR(1)            NOT NULL,
    LAST_LOGIN_SUCCESS_DT DATETIME,
    LAST_LOGIN_ATTEMPT_DT DATETIME,
    LAST_LOGIN_IP         VARCHAR(32),
    LOGIN_FAILED_TIMES    INT,
    ACTIVATED_AT          DATETIME           NOT NULL,
    DEACTIVATED_AT        DATETIME           NOT NULL,
    CREATED_AT            DATETIME           NOT NULL,
    CREATED_BY            VARCHAR(32)        NOT NULL,
    UPDATED_AT            DATETIME           NOT NULL,
    UPDATED_BY            VARCHAR(32)        NOT NULL

);




CREATE TABLE AC_USER_ACCT_H
(
    AUDIT_ID              BIGINT PRIMARY KEY AUTO_INCREMENT,
    AUDIT_TYPE            CHAR(2),
    AUDIT_TIME            DATETIME,
    ID                    BIGINT,
    LOGIN_ID              VARCHAR(16),
    DOMAIN                VARCHAR(12),
    NAME                  VARCHAR(24),
    DISPLAY_NAME          VARCHAR(32),
    TYPE                  VARCHAR(16),
    PASSWORD              VARCHAR(256),
    EMAIL                 VARCHAR(64),
    PHONE_NO              VARCHAR(11),
    STATUS                CHAR(1),
    IS_FIRST_LOGIN        CHAR(1),
    IS_NEED_CHANGE_PWD    CHAR(1),
    LAST_LOGIN_SUCCESS_DT DATETIME,
    LAST_LOGIN_ATTEMPT_DT DATETIME,
    LAST_LOGIN_IP         VARCHAR(32),
    LOGIN_FAILED_TIMES    INT,
    ACTIVATED_AT          DATETIME,
    DEACTIVATED_AT        DATETIME,
    CREATED_AT            DATETIME,
    CREATED_BY            VARCHAR(32),
    UPDATED_AT            DATETIME,
    UPDATED_BY            VARCHAR(32)
);


DELIMITER ##
CREATE TRIGGER AC_USER_ACCT_TRG_AI
    AFTER INSERT
    ON AC_USER_ACCT
    FOR EACH ROW
BEGIN
    INSERT INTO AC_USER_ACCT_H(AUDIT_ID, AUDIT_TYPE, AUDIT_TIME,
                               ID, LOGIN_ID, DOMAIN, NAME, DISPLAY_NAME, PASSWORD,
                               EMAIL, PHONE_NO, STATUS, IS_FIRST_LOGIN, IS_NEED_CHANGE_PWD,
                               LAST_LOGIN_SUCCESS_DT, LAST_LOGIN_ATTEMPT_DT, LAST_LOGIN_IP, LOGIN_FAILED_TIMES,
                               ACTIVATED_AT,
                               DEACTIVATED_AT, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUES (NULL, 'AI', NOW(),
            NEW.ID, NEW.LOGIN_ID, NEW.DOMAIN, NEW.NAME, NEW.DISPLAY_NAME, NEW.PASSWORD,
            NEW.EMAIL, NEW.PHONE_NO, NEW.STATUS, NEW.IS_FIRST_LOGIN, NEW.IS_NEED_CHANGE_PWD,
            NEW.LAST_LOGIN_SUCCESS_DT, NEW.LAST_LOGIN_ATTEMPT_DT, NEW.LAST_LOGIN_IP, NEW.LOGIN_FAILED_TIMES,
            NEW.ACTIVATED_AT,
            NEW.DEACTIVATED_AT, NEW.CREATED_AT, NEW.CREATED_BY, NEW.UPDATED_AT, NEW.UPDATED_BY);
END ##
DELIMITER ;

DELIMITER ##
CREATE TRIGGER AC_USER_ACCT_TRG_BU
    BEFORE UPDATE
    ON AC_USER_ACCT
    FOR EACH ROW
BEGIN
    INSERT INTO AC_USER_ACCT_H(AUDIT_ID, AUDIT_TYPE, AUDIT_TIME,
                               ID, LOGIN_ID, DOMAIN, NAME, DISPLAY_NAME, PASSWORD,
                               EMAIL, PHONE_NO, STATUS, IS_FIRST_LOGIN, IS_NEED_CHANGE_PWD,
                               LAST_LOGIN_SUCCESS_DT, LAST_LOGIN_ATTEMPT_DT, LAST_LOGIN_IP, LOGIN_FAILED_TIMES,
                               ACTIVATED_AT,
                               DEACTIVATED_AT, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUES (NULL, 'BU', NOW(),
            OLD.ID, OLD.LOGIN_ID, OLD.DOMAIN, OLD.NAME, OLD.DISPLAY_NAME, OLD.PASSWORD,
            OLD.EMAIL, OLD.PHONE_NO, OLD.STATUS, OLD.IS_FIRST_LOGIN, OLD.IS_NEED_CHANGE_PWD,
            OLD.LAST_LOGIN_SUCCESS_DT, OLD.LAST_LOGIN_ATTEMPT_DT, OLD.LAST_LOGIN_IP, OLD.LOGIN_FAILED_TIMES,
            OLD.ACTIVATED_AT,
            OLD.DEACTIVATED_AT, OLD.CREATED_AT, OLD.CREATED_BY, OLD.UPDATED_AT, OLD.UPDATED_BY);
END ##
DELIMITER ;

DELIMITER ##
CREATE TRIGGER AC_USER_ACCT_TRG_AU
    AFTER UPDATE
    ON AC_USER_ACCT
    FOR EACH ROW
BEGIN
    INSERT INTO AC_USER_ACCT_H(AUDIT_ID, AUDIT_TYPE, AUDIT_TIME,
                               ID, LOGIN_ID, DOMAIN, NAME, DISPLAY_NAME, PASSWORD,
                               EMAIL, PHONE_NO, STATUS, IS_FIRST_LOGIN, IS_NEED_CHANGE_PWD,
                               LAST_LOGIN_SUCCESS_DT, LAST_LOGIN_ATTEMPT_DT, LAST_LOGIN_IP, LOGIN_FAILED_TIMES,
                               ACTIVATED_AT,
                               DEACTIVATED_AT, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUES (NULL, 'AU', NOW(),
            NEW.ID, NEW.LOGIN_ID, NEW.DOMAIN, NEW.NAME, NEW.DISPLAY_NAME, NEW.PASSWORD,
            NEW.EMAIL, NEW.PHONE_NO, NEW.STATUS, NEW.IS_FIRST_LOGIN, NEW.IS_NEED_CHANGE_PWD,
            NEW.LAST_LOGIN_SUCCESS_DT, NEW.LAST_LOGIN_ATTEMPT_DT, NEW.LAST_LOGIN_IP, NEW.LOGIN_FAILED_TIMES,
            NEW.ACTIVATED_AT,
            NEW.DEACTIVATED_AT, NEW.CREATED_AT, NEW.CREATED_BY, NEW.UPDATED_AT, NEW.UPDATED_BY);
END ##
DELIMITER ;

DELIMITER ##
CREATE TRIGGER AC_USER_ACCT_TRG_BD
    BEFORE DELETE
    ON AC_USER_ACCT
    FOR EACH ROW
BEGIN
    INSERT INTO AC_USER_ACCT_H(AUDIT_ID, AUDIT_TYPE, AUDIT_TIME,
                               ID, LOGIN_ID, DOMAIN, NAME, DISPLAY_NAME, PASSWORD,
                               EMAIL, PHONE_NO, STATUS, IS_FIRST_LOGIN, IS_NEED_CHANGE_PWD,
                               LAST_LOGIN_SUCCESS_DT, LAST_LOGIN_ATTEMPT_DT, LAST_LOGIN_IP, LOGIN_FAILED_TIMES,
                               ACTIVATED_AT,
                               DEACTIVATED_AT, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUES (NULL, 'BD', NOW(),
            OLD.ID, OLD.LOGIN_ID, OLD.DOMAIN, OLD.NAME, OLD.DISPLAY_NAME, OLD.PASSWORD,
            OLD.EMAIL, OLD.PHONE_NO, OLD.STATUS, OLD.IS_FIRST_LOGIN, OLD.IS_NEED_CHANGE_PWD,
            OLD.LAST_LOGIN_SUCCESS_DT, OLD.LAST_LOGIN_ATTEMPT_DT, OLD.LAST_LOGIN_IP, OLD.LOGIN_FAILED_TIMES,
            OLD.ACTIVATED_AT,
            OLD.DEACTIVATED_AT, OLD.CREATED_AT, OLD.CREATED_BY, OLD.UPDATED_AT, OLD.UPDATED_BY);
END ##
DELIMITER ;

CREATE TABLE AC_USER_LOGIN_HIS
(
    USER_ACCT_ID BIGINT      NOT NULL,
    ACCT_STATUS  CHAR(1)     NOT NULL,
    LOGIN_AT     DATETIME    NOT NULL,
    LOGIN_STATUS INT         NOT NULL,
    IP_ADDRESS   VARCHAR(32),
    BROWSER      VARCHAR(4000),
    CREATED_AT   DATETIME    NOT NULL,
    CREATED_BY   VARCHAR(32) NOT NULL,
    UPDATED_AT   DATETIME    NOT NULL,
    UPDATED_BY   VARCHAR(32) NOT NULL,
    INDEX LOGIN_HIS_IDX (USER_ACCT_ID)
);

CREATE TABLE AC_USER_ROLE_ASSIGN
(
    USER_ACCT_ID   BIGINT      NOT NULL,
    ROLE_ID        VARCHAR(8)  NOT NULL,
    ACTIVATED_AT   DATETIME    NOT NULL,
    DEACTIVATED_AT DATETIME    NOT NULL,
    APPROVED_BY    VARCHAR(16),
    REMARKS        VARCHAR(100),
    CREATED_AT     DATETIME    NOT NULL,
    CREATED_BY     VARCHAR(32) NOT NULL,
    UPDATED_AT     DATETIME    NOT NULL,
    UPDATED_BY     VARCHAR(32) NOT NULL,
    INDEX USER_ROLE_ASSIGN_IDX (USER_ACCT_ID)
);

ALTER TABLE AC_USER_ROLE_ASSIGN
    ADD CONSTRAINT ASSIGN_ROLE_ID_FK FOREIGN KEY (ROLE_ID) REFERENCES AC_ROLE (ID);
ALTER TABLE AC_USER_ROLE_ASSIGN
    ADD CONSTRAINT ASSIGN_USER_ACCT_ID_FK FOREIGN KEY (USER_ACCT_ID) REFERENCES AC_USER_ACCT (ID);

CREATE TABLE AC_USER_ROLE_ASSIGN_H
(
    AUDIT_ID       BIGINT PRIMARY KEY AUTO_INCREMENT,
    AUDIT_TYPE     CHAR(2),
    AUDIT_TIME     DATETIME,
    USER_ACCT_ID   BIGINT,
    ROLE_ID        VARCHAR(8),
    ACTIVATED_AT   DATETIME,
    DEACTIVATED_AT DATETIME,
    APPROVED_BY    VARCHAR(16),
    REMARKS        VARCHAR(100),
    CREATED_AT     DATETIME,
    CREATED_BY     VARCHAR(32),
    UPDATED_AT     DATETIME,
    UPDATED_BY     VARCHAR(32)
);

INSERT INTO AC_USER_ACCT
(ID, LOGIN_ID, `DOMAIN`, NAME, DISPLAY_NAME, PASSWORD, EMAIL, PHONE_NO, STATUS, IS_FIRST_LOGIN, IS_NEED_CHANGE_PWD, LAST_LOGIN_SUCCESS_DT, LAST_LOGIN_ATTEMPT_DT, LAST_LOGIN_IP, LOGIN_FAILED_TIMES, ACTIVATED_AT, DEACTIVATED_AT, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES(NULL, 'sys', 'INTRANET', 'System Admin', 'System Admin', '$2a$10$3i1fcCo7NkPnfnBIz3ZpDufXVZHnG1Mef9UNbRBxuQovuADvgbK7.', 'test@test.com', '12345678900', 'A', 'N', 'N', '2020-09-20 18:09:15', '2020-09-20 18:09:15', '192.168.109.1', 0, '2020-08-01 00:00:00', '2100-12-31 00:00:00', '2020-08-01 00:00:00', 'SYSTEM', '2020-09-20 18:09:15', 'sys');

INSERT INTO AC_USER_ROLE_ASSIGN
(USER_ACCT_ID, ROLE_ID, ACTIVATED_AT, DEACTIVATED_AT, APPROVED_BY, REMARKS, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES((SELECT ID FROM AC_USER_ACCT WHERE LOGIN_ID = 'sys'), 'SYSADMIN', '2020-01-01 00:00:00', '2100-12-31 00:00:00', 'SYSTEM', NULL, '2020-08-01 00:00:00', 'SYSTEM', '2020-08-01 00:00:00', 'SYSTEM');


DELIMITER ##
CREATE TRIGGER AC_USER_ROLE_ASSIGN_TRG_AI
    AFTER INSERT
    ON AC_USER_ROLE_ASSIGN
    FOR EACH ROW
BEGIN
    INSERT INTO AC_USER_ROLE_ASSIGN_H(AUDIT_ID, AUDIT_TYPE, AUDIT_TIME,
                                      USER_ACCT_ID, ROLE_ID, ACTIVATED_AT, DEACTIVATED_AT, APPROVED_BY, REMARKS,
                                      CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUES (NULL, 'AI', NOW(),
            NEW.USER_ACCT_ID, NEW.ROLE_ID, NEW.ACTIVATED_AT, NEW.DEACTIVATED_AT, NEW.APPROVED_BY, NEW.REMARKS,
            NEW.CREATED_AT, NEW.CREATED_BY, NEW.UPDATED_AT, NEW.UPDATED_BY);
END ##
DELIMITER ;

DELIMITER ##
CREATE TRIGGER AC_USER_ROLE_ASSIGN_TRG_BU
    BEFORE UPDATE
    ON AC_USER_ROLE_ASSIGN
    FOR EACH ROW
BEGIN
    INSERT INTO AC_USER_ROLE_ASSIGN_H(AUDIT_ID, AUDIT_TYPE, AUDIT_TIME,
                                      USER_ACCT_ID, ROLE_ID, ACTIVATED_AT, DEACTIVATED_AT, APPROVED_BY, REMARKS,
                                      CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUES (NULL, 'BU', NOW(),
            OLD.USER_ACCT_ID, OLD.ROLE_ID, OLD.ACTIVATED_AT, OLD.DEACTIVATED_AT, OLD.APPROVED_BY, OLD.REMARKS,
            OLD.CREATED_AT, OLD.CREATED_BY, OLD.UPDATED_AT, OLD.UPDATED_BY);
END ##
DELIMITER ;

DELIMITER ##
CREATE TRIGGER AC_USER_ROLE_ASSIGN_TRG_AU
    AFTER UPDATE
    ON AC_USER_ROLE_ASSIGN
    FOR EACH ROW
BEGIN
    INSERT INTO AC_USER_ROLE_ASSIGN_H(AUDIT_ID, AUDIT_TYPE, AUDIT_TIME,
                                      USER_ACCT_ID, ROLE_ID, ACTIVATED_AT, DEACTIVATED_AT, APPROVED_BY, REMARKS,
                                      CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUES (NULL, 'AU', NOW(),
            NEW.USER_ACCT_ID, NEW.ROLE_ID, NEW.ACTIVATED_AT, NEW.DEACTIVATED_AT, NEW.APPROVED_BY, NEW.REMARKS,
            NEW.CREATED_AT, NEW.CREATED_BY, NEW.UPDATED_AT, NEW.UPDATED_BY);
END ##
DELIMITER ;

DELIMITER ##
CREATE TRIGGER AC_USER_ROLE_ASSIGN_TRG_BD
    BEFORE DELETE
    ON AC_USER_ROLE_ASSIGN
    FOR EACH ROW
BEGIN
    INSERT INTO AC_USER_ROLE_ASSIGN_H(AUDIT_ID, AUDIT_TYPE, AUDIT_TIME,
                                      USER_ACCT_ID, ROLE_ID, ACTIVATED_AT, DEACTIVATED_AT, APPROVED_BY, REMARKS,
                                      CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUES (NULL, 'BD', NOW(),
            OLD.USER_ACCT_ID, OLD.ROLE_ID, OLD.ACTIVATED_AT, OLD.DEACTIVATED_AT, OLD.APPROVED_BY, OLD.REMARKS,
            OLD.CREATED_AT, OLD.CREATED_BY, OLD.UPDATED_AT, OLD.UPDATED_BY);
END ##
DELIMITER ;

CREATE TABLE CM_CONFIG
(
    CONFIG_KEY      VARCHAR(64) NOT NULL,
    CONFIG_VALUE    VARCHAR(64) NOT NULL,
    TYPE            VARCHAR(64),
    PROFILE         VARCHAR(64),
    DESCRIPTION     VARCHAR(256),
    IS_SYSTEM       CHAR(1),
    IS_EDITABLE     CHAR(1),
    IS_NEED_RESTART CHAR(1),
    CREATED_AT      DATETIME    NOT NULL,
    CREATED_BY      VARCHAR(32) NOT NULL,
    UPDATED_AT      DATETIME    NOT NULL,
    UPDATED_BY      VARCHAR(32) NOT NULL,
    PRIMARY KEY CM_CONFIG_PK (CONFIG_KEY, CONFIG_VALUE)
);

INSERT INTO CM_CONFIG
(CONFIG_KEY, CONFIG_VALUE, `TYPE`, PROFILE, DESCRIPTION, IS_SYSTEM, IS_EDITABLE, IS_NEED_RESTART, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES('legion.server.mail.host', 'TEST@TEST.com', NULL, NULL, NULL, 'Y', 'N', NULL, '2020-09-01 00:00:00', 'SYSTEM', '2020-09-01 00:00:00', 'SYSTEM');

INSERT INTO CM_CONFIG
(CONFIG_KEY, CONFIG_VALUE, `TYPE`, PROFILE, DESCRIPTION, IS_SYSTEM, IS_EDITABLE, IS_NEED_RESTART, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES('security.login.maxFailedTimes', '10', NULL, NULL, NULL, 'Y', 'Y', 'N', '2020-09-01 00:00:00', 'SYSTEM', '2020-09-01 00:00:00', 'SYSTEM');

INSERT INTO CM_CONFIG
(CONFIG_KEY, CONFIG_VALUE, `TYPE`, PROFILE, DESCRIPTION, IS_SYSTEM, IS_EDITABLE, IS_NEED_RESTART, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES('server.smtp.enabled', 'N', NULL, NULL, NULL, 'Y', 'Y', 'N', '2020-09-01 00:00:00', 'SYSTEM', '2020-09-01 00:00:00', 'SYSTEM');



CREATE TABLE CM_FILE_NET
(
    ID           BIGINT PRIMARY KEY AUTO_INCREMENT,
    FILE_NAME    VARCHAR(256)  NOT NULL,
    FILE_TYPE    VARCHAR(16)    NOT NULL,
    SIZE         INT,
    STATUS       VARCHAR(16)   NOT NULL,
    STORAGE_TYPE VARCHAR(16)   NOT NULL,
    MIME_TYPE    VARCHAR(256)  NOT NULL,
    FILE_UUID    VARCHAR(128)  NOT NULL,
    PATH         VARCHAR(4000),
    SHA512      VARCHAR(1024) NOT NULL,
    DATA         MEDIUMBLOB,
    CREATED_AT   DATETIME      NOT NULL,
    CREATED_BY   VARCHAR(32)   NOT NULL,
    UPDATED_AT   DATETIME      NOT NULL,
    UPDATED_BY   VARCHAR(32)   NOT NULL
);

CREATE TABLE CM_ISSUE_RESOLUTION
(
    RESOLUTION_CODE VARCHAR(16) PRIMARY KEY,
    DISPLAY_NAME    VARCHAR(64) NOT NULL,
    DESCRIPTION     VARCHAR(500),
    IS_SYSTEM       CHAR(1)     NOT NULL,
    IS_INUSE        CHAR(1) DEFAULT 'Y',
    CREATED_AT      DATETIME    NOT NULL,
    CREATED_BY      VARCHAR(32) NOT NULL,
    UPDATED_AT      DATETIME    NOT NULL,
    UPDATED_BY      VARCHAR(32) NOT NULL
);

INSERT INTO CM_ISSUE_RESOLUTION (RESOLUTION_CODE, DISPLAY_NAME, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('OPEN', '等待解决', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_RESOLUTION (RESOLUTION_CODE, DISPLAY_NAME, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('RESOLVED', '已解决', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_RESOLUTION (RESOLUTION_CODE, DISPLAY_NAME, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('RESOLVING', '正在解决', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_RESOLUTION (RESOLUTION_CODE, DISPLAY_NAME, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('POSTPONE', '推迟处理', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_RESOLUTION (RESOLUTION_CODE, DISPLAY_NAME, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('NOT_PROCEED', '暂不处理', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_RESOLUTION (RESOLUTION_CODE, DISPLAY_NAME, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('UNSOLVABLE', '无法处理', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_RESOLUTION (RESOLUTION_CODE, DISPLAY_NAME, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('NO_NEED', '无需处理', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');


CREATE TABLE CM_ISSUE_STATUS
(
    STATUS_CODE  VARCHAR(16) PRIMARY KEY,
    DISPLAY_NAME VARCHAR(64) NOT NULL,
    DESCRIPTION  VARCHAR(500),
    COLOR        VARCHAR(7)  NOT NULL,
    IS_SYSTEM    CHAR(1)     NOT NULL,
    IS_INUSE     CHAR(1) DEFAULT 'Y',
    CREATED_AT   DATETIME    NOT NULL,
    CREATED_BY   VARCHAR(32) NOT NULL,
    UPDATED_AT   DATETIME    NOT NULL,
    UPDATED_BY   VARCHAR(32) NOT NULL

);

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('OPEN', '新问题', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');


INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('REOPENED', '复现（未修复）', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('INVEST', '正在查明原因', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('ACK', '问题已确认', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('COMMITTED', '已提交仓库', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('P_DEPLOY', '等待部署', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('DEPLOYED', '已部署', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('MONITOR', '监控中', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('FIX_VERIFIED', '修复已验证', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('P_EXT_PARTY', '等待外部确认', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('P_CONFIRM', '等待确认', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_ISSUE_STATUS (STATUS_CODE, DISPLAY_NAME, COLOR, IS_SYSTEM, CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
    VALUE ('CLOSED', '已关闭', '#FFFFFF', 'Y', NOW(), 'SYSTEM', NOW(), 'SYSTEM');


CREATE TABLE CM_MASTER_CODE
(
    ID            INT PRIMARY KEY AUTO_INCREMENT,
    TYPE          VARCHAR(64) NOT NULL,
    CODE          VARCHAR(16) NOT NULL,
    VALUE         VARCHAR(64) NOT NULL,
    DESCRIPTION   VARCHAR(500),
    IS_CACHED     CHAR(1)     NOT NULL,
    IS_SYSTEM     CHAR(1),
    DISPLAY_ORDER INT,
    IS_EDITABLE   CHAR(1)     NOT NULL,
    CREATED_AT    DATETIME    NOT NULL,
    CREATED_BY    VARCHAR(32) NOT NULL,
    UPDATED_AT    DATETIME    NOT NULL,
    UPDATED_BY    VARCHAR(32) NOT NULL,
    UNIQUE MASTER_TYPE_CODE_UK (TYPE, CODE)
);

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'OPEN', 'Open', '新问题（未分配）', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'REOPEN', 'Reopen', '复现（未修复）', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'INVEST', 'Investigation', '正在查明原因', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'ACK', 'Acknowledged', '问题已确认', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'COMMITTED', 'Committed', '已提交仓库', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'P_DEPLOY', 'Pending Deployment', '等待部署', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'DEPLOYED', 'Deployed', '已部署', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'MONITOR', 'Monitoring', '监控中', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'FIX_VERIFIED', 'Fixed and Verified', '修复已验证', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'P_EXT_PARTY', 'Pending External Party', '等待外部确认', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'P_CONFIRM', 'Pending Confirmation', '等待确认', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.status.default', 'CLOSED', 'Closed', '已关闭', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');


-- fix status
INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.resolution.default', 'RESOLVED', 'Resolved', '已解决', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.resolution.default', 'RESOLVING', 'Resolving', '正在解决', 'Y', 'Y', 2, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.resolution.default', 'POSTPONE', 'Postpone', '推迟处理', 'Y', 'Y', 3, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.resolution.default', 'NOT_PROCEED', 'Not Proceed', '暂不处理', 'Y', 'Y', 4, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.resolution.default', 'UNSOLVABLE', 'Unsolvable', '无法处理', 'Y', 'Y', 5, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

--
INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('project.stage.default', 'DEV', 'Developing', '开发阶段', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('project.stage.default', 'SIT', 'Self Internal Test', '系统集成测试', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('project.stage.default', 'UAT', 'User Acceptance Testing', '用户验收测试', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('project.stage.default', 'PRD', 'Production', '线上维护', 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');





--
INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.reproducibility', 'ALWAYS', '始终', NULL, 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.reproducibility', 'SOMETIMES', '偶尔', NULL, 'Y', 'Y', 2, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.reproducibility', 'RANDOM', '随机', NULL, 'Y', 'Y', 3, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.reproducibility', 'NEVER', '从不', NULL, 'Y', 'Y', 4, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.reproducibility', 'NA', '未知', NULL, 'Y', 'Y', 5, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');




--
INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.priority', 'NORMAL', '普通', NULL, 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.priority', 'LOW', '低', NULL, 'Y', 'Y', 2, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.priority', 'MEDIUM', '中等', NULL, 'Y', 'Y', 3, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.priority', 'URGENT', '紧急', NULL, 'Y', 'Y', 4, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.priority', 'V_URGENT', '十分紧急', NULL, 'Y', 'Y', 5, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');



--
INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.severity', 'S0', '高危', NULL, 'Y', 'Y', 5, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.severity', 'S1', '严重', NULL, 'Y', 'Y', 4, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.severity', 'S2', '重要', NULL, 'Y', 'Y', 3, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.severity', 'S3', '普通', NULL, 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.severity', 'S4', '建议', NULL, 'Y', 'Y', 2, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');


INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.relationship', 'RESEMBLE', '原因相似/相同', NULL, 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.relationship', 'DUPLICATED', '重复', NULL, 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');

INSERT INTO CM_MASTER_CODE (TYPE, CODE, VALUE, DESCRIPTION, IS_CACHED, IS_SYSTEM, DISPLAY_ORDER, IS_EDITABLE,
                            CREATED_AT, CREATED_BY, UPDATED_AT, UPDATED_BY)
VALUES ('issue.relationship', 'CONFLICTED', '冲突', NULL, 'Y', 'Y', 1, 'N', NOW(), 'SYSTEM', NOW(), 'SYSTEM');


CREATE TABLE CM_SEQUENCE
(
    NAME        VARCHAR(32) PRIMARY KEY,
    VALUE       BIGINT      NOT NULL DEFAULT 0,
    MIN_VALUE   BIGINT      NOT NULL DEFAULT 0,
    MAX_VALUE   BIGINT,
    STEP        INT         NOT NULL DEFAULT 1,
    DESCRIPTION VARCHAR(100),
    CREATED_AT  DATETIME    NOT NULL,
    CREATED_BY  VARCHAR(32) NOT NULL,
    UPDATED_AT  DATETIME    NOT NULL,
    UPDATED_BY  VARCHAR(32) NOT NULL
);

CREATE TABLE PJT_PROJECT_GROUP
(
    ID          BIGINT PRIMARY KEY AUTO_INCREMENT,
    NAME        VARCHAR(64),
    DESCRIPTION VARCHAR(500),
    CREATED_AT  DATETIME    NOT NULL,
    CREATED_BY  VARCHAR(32) NOT NULL,
    UPDATED_AT  DATETIME    NOT NULL,
    UPDATED_BY  VARCHAR(32) NOT NULL

);

CREATE TABLE PJT_PROJECT
(
    ID          BIGINT PRIMARY KEY AUTO_INCREMENT,
    NAME        VARCHAR(64)   NOT NULL UNIQUE,
    GROUP_ID    BIGINT        NOT NULL,
    FILE_PATH   VARCHAR(4000) NOT NULL,
    IS_PUBLIC   CHAR(1)       NOT NULL DEFAULT 'N',
    DESCRIPTION VARCHAR(500),
    STAGE       CHAR(3),
    STATUS      VARCHAR(16)   NOT NULL,
    CREATED_AT  DATETIME      NOT NULL,
    CREATED_BY  VARCHAR(32)   NOT NULL,
    UPDATED_AT  DATETIME      NOT NULL,
    UPDATED_BY  VARCHAR(32)   NOT NULL

);
ALTER TABLE PJT_PROJECT
    ADD CONSTRAINT PJT_PROJECT_GROUP_FK FOREIGN KEY (GROUP_ID) REFERENCES PJT_PROJECT_GROUP (ID);


CREATE TABLE PJT_PROJECT_H
(
    AUDIT_ID    BIGINT PRIMARY KEY AUTO_INCREMENT,
    AUDIT_TYPE  CHAR(2),
    AUDIT_TIME  DATETIME,
    ID          BIGINT,
    NAME        VARCHAR(64),
    GROUP_ID    BIGINT,
    FILE_PATH   VARCHAR(4000),
    IS_PUBLIC   CHAR(1),
    DESCRIPTION VARCHAR(500),
    STAGE       CHAR(3),
    STATUS      VARCHAR(16),
    CREATED_AT  DATETIME,
    CREATED_BY  VARCHAR(32),
    UPDATED_AT  DATETIME,
    UPDATED_BY  VARCHAR(32)

);



CREATE TABLE PJT_MODULE
(
    ID          BIGINT PRIMARY KEY AUTO_INCREMENT,
    PROJECT_ID  BIGINT,
    NAME        VARCHAR(64),
    DESCRIPTION VARCHAR(500),
    CREATED_AT  DATETIME    NOT NULL,
    CREATED_BY  VARCHAR(32) NOT NULL,
    UPDATED_AT  DATETIME    NOT NULL,
    UPDATED_BY  VARCHAR(32) NOT NULL
);
ALTER TABLE PJT_MODULE
    ADD CONSTRAINT PJT_MODULE_PROJECT_FK FOREIGN KEY (PROJECT_ID) REFERENCES PJT_PROJECT (ID);


CREATE TABLE PJT_USER_PROJECT_ASN
(
    USER_ACCT_ID  BIGINT NOT NULL,
    PROJECT_ID    BIGINT,
    GROUP_ID      BIGINT NOT NULL ,
    ASSIGN_REASON VARCHAR(500),
    CREATED_AT    DATETIME    NOT NULL,
    CREATED_BY    VARCHAR(32) NOT NULL,
    UPDATED_AT    DATETIME    NOT NULL,
    UPDATED_BY    VARCHAR(32) NOT NULL,
    UNIQUE (USER_ACCT_ID, PROJECT_ID, GROUP_ID)
);

CREATE TABLE PJT_USER_PROJECT_ASN_H
(
    AUDIT_ID      BIGINT PRIMARY KEY AUTO_INCREMENT,
    AUDIT_TYPE    CHAR(2),
    AUDIT_TIME    DATETIME,
    USER_ACCT_ID  BIGINT,
    PROJECT_ID    BIGINT,
    GROUP_ID      BIGINT,
    ASSIGN_REASON VARCHAR(500),
    CREATED_AT    DATETIME,
    CREATED_BY    VARCHAR(32),
    UPDATED_AT    DATETIME,
    UPDATED_BY    VARCHAR(32)
);
ALTER TABLE PJT_USER_PROJECT_ASN
    ADD CONSTRAINT PJT_USER_PROJECT_ASN_PROJECT_FK FOREIGN KEY (PROJECT_ID) REFERENCES PJT_PROJECT (ID);

ALTER TABLE PJT_USER_PROJECT_ASN
    ADD CONSTRAINT PJT_USER_PROJECT_ASN_USER_ID_FK FOREIGN KEY (USER_ACCT_ID) REFERENCES AC_USER_ACCT (ID);


CREATE TABLE ISU_ISSUE
(
    ID              BIGINT PRIMARY KEY AUTO_INCREMENT,
    MODULE_ID       BIGINT       NOT NULL,
    GROUP_ID        BIGINT       NOT NULL,
    PROJECT_ID      BIGINT       NOT NULL,
    TITLE           VARCHAR(100) NOT NULL,
    DESCRIPTION     MEDIUMBLOB   NOT NULL,
    REPRODUCIBILITY VARCHAR(16)  NOT NULL,
    STATUS          VARCHAR(16)  NOT NULL,
    RESOLUTION      VARCHAR(16)  NOT NULL,
    PRIORITY        VARCHAR(16)  NOT NULL,
    SEVERITY        VARCHAR(16)  NOT NULL,
    ASSIGNED_TO     BIGINT,
    ROOT_CAUSE      VARCHAR(4000),
    FIXED_AT        DATETIME,
    REPORTED_BY     BIGINT       NOT NULL,
    REPORTED_AT     DATETIME     NOT NULL,
    TAG             VARCHAR(4000),
    CREATED_AT      DATETIME     NOT NULL,
    CREATED_BY      VARCHAR(32)  NOT NULL,
    UPDATED_AT      DATETIME     NOT NULL,
    UPDATED_BY      VARCHAR(32)  NOT NULL,
    INDEX PROJECT_ID_IDX (PROJECT_ID),
    INDEX GROUP_ID_IDX (GROUP_ID)

);

CREATE TABLE ISU_ISSUE_HISTORY
(
    ID         BIGINT PRIMARY KEY AUTO_INCREMENT,
    ISSUE_ID   BIGINT,
    FIELD_NAME VARCHAR(64) NOT NULL,
    OLD_VALUE  VARCHAR(128),
    NEW_VALUE  VARCHAR(128),
    CREATED_AT DATETIME    NOT NULL,
    CREATED_BY VARCHAR(32) NOT NULL,
    UPDATED_AT DATETIME    NOT NULL,
    UPDATED_BY VARCHAR(32) NOT NULL
);
ALTER TABLE ISU_ISSUE_HISTORY
    ADD CONSTRAINT ISU_ISSUE_HISTORY_FK FOREIGN KEY (ISSUE_ID) REFERENCES ISU_ISSUE (ID);

CREATE TABLE ISU_ATTACHMENT
(
    ID          BIGINT PRIMARY KEY AUTO_INCREMENT,
    ISSUE_ID    BIGINT       NOT NULL,
    FILE_NAME   VARCHAR(128) NOT NULL,
    FILE_NET_ID BIGINT       NOT NULL,
    CREATED_AT  DATETIME     NOT NULL,
    CREATED_BY  VARCHAR(32)  NOT NULL,
    UPDATED_AT  DATETIME     NOT NULL,
    UPDATED_BY  VARCHAR(32)  NOT NULL
);
ALTER TABLE ISU_ATTACHMENT
    ADD CONSTRAINT ISU_ATTACHMENT_FK FOREIGN KEY (ISSUE_ID) REFERENCES ISU_ISSUE (ID);

CREATE TABLE ISU_NOTE
(
    ID         BIGINT PRIMARY KEY AUTO_INCREMENT,
    ISSUE_ID   BIGINT        NOT NULL,
    CONTENT    VARCHAR(4000) NOT NULL,
    TYPE       VARCHAR(8),
    CREATED_AT DATETIME      NOT NULL,
    CREATED_BY VARCHAR(32)   NOT NULL,
    UPDATED_AT DATETIME      NOT NULL,
    UPDATED_BY VARCHAR(32)   NOT NULL
);
ALTER TABLE ISU_NOTE
    ADD CONSTRAINT ISU_NOTE_FK FOREIGN KEY (ISSUE_ID) REFERENCES ISU_ISSUE (ID);

CREATE TABLE ISU_RELATIONSHIP
(

    ID                BIGINT PRIMARY KEY AUTO_INCREMENT,
    SRC_ISSUE_ID      BIGINT      NOT NULL,
    DEST_ISSUE_ID     BIGINT      NOT NULL,
    RELATIONSHIP_TYPE VARCHAR(16) NOT NULL,
    CREATED_AT        DATETIME    NOT NULL,
    CREATED_BY        VARCHAR(32) NOT NULL,
    UPDATED_AT        DATETIME    NOT NULL,
    UPDATED_BY        VARCHAR(32) NOT NULL,
    INDEX SRC_ISSUE_ID_IDX (SRC_ISSUE_ID),
    INDEX DEST_ISSUE_ID_IDX (DEST_ISSUE_ID)
);


CREATE TABLE ISU_FOLLOWER
(
    ISSUE_ID                BIGINT      NOT NULL,
    USER_ACCT_ID            BIGINT      NOT NULL,
    IS_NOTIFICATION_ENABLED CHAR(1),
    CREATED_AT              DATETIME    NOT NULL,
    CREATED_BY              VARCHAR(32) NOT NULL,
    UPDATED_AT              DATETIME    NOT NULL,
    UPDATED_BY              VARCHAR(32) NOT NULL,
    UNIQUE ISSUE_FOLLOWER_UX (ISSUE_ID, USER_ACCT_ID)
);

CREATE TABLE ISU_P_CONFIRMATION
(
    ISSUE_ID     BIGINT      NOT NULL,
    REQUEST_FROM BIGINT      NOT NULL,
    REQUEST_TO   BIGINT      NOT NULL,
    IS_CONFIRMED CHAR(1)     NOT NULL DEFAULT 'N',
    CREATED_AT   DATETIME    NOT NULL,
    CREATED_BY   VARCHAR(32) NOT NULL,
    UPDATED_AT   DATETIME    NOT NULL,
    UPDATED_BY   VARCHAR(32) NOT NULL
);
ALTER TABLE ISU_P_CONFIRMATION
    ADD CONSTRAINT ISU_P_CONFIRMATION_FK FOREIGN KEY (ISSUE_ID) REFERENCES ISU_ISSUE (ID);

CREATE TABLE ISU_VCS_TRACKER
(
    ID             BIGINT PRIMARY KEY AUTO_INCREMENT,
    ISSUE_ID       BIGINT        NOT NULL,
    PROJECT_ID     BIGINT        NOT NULL,
    FILE_FULL_PATH VARCHAR(4000) NOT NULL,
    MASTER_VERSION VARCHAR(64),
    BRANCH         VARCHAR(256),
    BRANCH_VERSION VARCHAR(64),
    TAG            VARCHAR(4000),
    CREATED_AT     DATETIME      NOT NULL,
    CREATED_BY     VARCHAR(32)   NOT NULL,
    UPDATED_AT     DATETIME      NOT NULL,
    UPDATED_BY     VARCHAR(32)   NOT NULL
);
ALTER TABLE ISU_VCS_TRACKER
    ADD CONSTRAINT ISU_VCS_TRACKER_FK FOREIGN KEY (ISSUE_ID) REFERENCES ISU_ISSUE (ID);


CREATE TABLE ISU_SEARCH_FILTER
(
    USER_ACCT_ID BIGINT UNIQUE NOT NULL,
    GROUP_ID     BIGINT,
    PROJECT_ID   BIGINT,
    REPORTER     BIGINT,
    DEVELOPER    BIGINT,
    MODULE_ID    BIGINT,
    SEVERITY     VARCHAR(16),
    STATUS       VARCHAR(16),
    RESOLUTION   VARCHAR(16),
    CREATED_AT   DATETIME      NOT NULL,
    CREATED_BY   VARCHAR(32)   NOT NULL,
    UPDATED_AT   DATETIME      NOT NULL,
    UPDATED_BY   VARCHAR(32)   NOT NULL
);

CREATE TABLE SA_EMAIL_ARCHIVE
(
    ID                BIGINT PRIMARY KEY AUTO_INCREMENT,
    SENT_FROM         VARCHAR(64)   NOT NULL,
    SENT_TO           VARCHAR(1024) NOT NULL,
    CC                VARCHAR(1024),
    SUBJECT           VARCHAR(500)  NOT NULL,
    CONTENT           MEDIUMBLOB,
    STATUS            VARCHAR(16)   NOT NULL,
    ATTACHMENT        MEDIUMBLOB,
    CREATED_AT        DATETIME      NOT NULL,
    CREATED_BY        VARCHAR(32)   NOT NULL,
    UPDATED_AT        DATETIME      NOT NULL,
    UPDATED_BY        VARCHAR(32)   NOT NULL
);

CREATE TABLE GNL_TIMESHEET
(
    ID                 BIGINT PRIMARY KEY AUTO_INCREMENT,
    USER_ACCT_ID       BIGINT       NOT NULL,
    EVENT_REFERRAL_TBL VARCHAR(128) NOT NULL,
    EVENT_REFERRAL_ID  BIGINT       NOT NULL,
    IS_AUTO_ADDED      CHAR(1)      NOT NULL,
    CREATED_AT         DATETIME     NOT NULL,
    CREATED_BY         VARCHAR(32)  NOT NULL,
    UPDATED_AT         DATETIME     NOT NULL,
    UPDATED_BY         VARCHAR(32)  NOT NULL
);

CREATE TABLE GNL_COMMON_EVENT
(
    ID          BIGINT PRIMARY KEY AUTO_INCREMENT,
    TITLE       VARCHAR(100) NOT NULL,
    TYPE        VARCHAR(16)  NOT NULL,
    CONTENT     VARCHAR(500),
    START_AT    DATETIME     NOT NULL,
    END_AT      DATETIME,
    COLOR       VARCHAR(7)   NOT NULL,
    TEXT_COLOR  VARCHAR(7)   NOT NULL,
    IS_ALL_DAY  CHAR(1)      NOT NULL,
    IS_EDITABLE CHAR(1)      NOT NULL,
    CREATED_AT  DATETIME     NOT NULL,
    CREATED_BY  VARCHAR(32)  NOT NULL,
    UPDATED_AT  DATETIME     NOT NULL,
    UPDATED_BY  VARCHAR(32)  NOT NULL
);


CREATE TABLE GNL_EMAIL
(
    ID                BIGINT PRIMARY KEY AUTO_INCREMENT,
    SUBJECT           VARCHAR(100),
    CONTENT           MEDIUMBLOB,
    IS_HAS_ATTACHMENT CHAR(1)     NOT NULL,
    CREATED_AT        DATETIME    NOT NULL,
    CREATED_BY        VARCHAR(32) NOT NULL,
    UPDATED_AT        DATETIME    NOT NULL,
    UPDATED_BY        VARCHAR(32) NOT NULL
);


CREATE TABLE GNL_EMAIL_ATTACHMENT
(
    ID          BIGINT PRIMARY KEY AUTO_INCREMENT,
    EMAIL_ID    BIGINT       NOT NULL,
    FILE_NAME   VARCHAR(128) NOT NULL,
    FILE_NET_ID BIGINT       NOT NULL,
    CREATED_AT  DATETIME     NOT NULL,
    CREATED_BY  VARCHAR(32)  NOT NULL,
    UPDATED_AT  DATETIME     NOT NULL,
    UPDATED_BY  VARCHAR(32)  NOT NULL
);

ALTER TABLE GNL_EMAIL_ATTACHMENT
    ADD CONSTRAINT GNL_EMAIL_ATTACHMENT_FK1 FOREIGN KEY (EMAIL_ID) REFERENCES GNL_EMAIL (ID);



CREATE TABLE GNL_EMAIL_REPLY
(
    ID                BIGINT PRIMARY KEY AUTO_INCREMENT,
    EMAIL_ID          BIGINT      NOT NULL,
    CONTENT           MEDIUMBLOB,
    IS_HAS_ATTACHMENT CHAR(1)     NOT NULL,
    CREATED_AT        DATETIME    NOT NULL,
    CREATED_BY        VARCHAR(32) NOT NULL,
    UPDATED_AT        DATETIME    NOT NULL,
    UPDATED_BY        VARCHAR(32) NOT NULL
);

CREATE TABLE GNL_EMAIL_OUTBOX
(
    ID         BIGINT PRIMARY KEY AUTO_INCREMENT,
    EMAIL_ID   BIGINT      NOT NULL,
    SENDER     VARCHAR(32) NOT NULL,
    STATUS     VARCHAR(16) NOT NULL,
    RECIPIENT  TEXT        NOT NULL,
    CREATED_AT DATETIME    NOT NULL,
    CREATED_BY VARCHAR(32) NOT NULL,
    UPDATED_AT DATETIME    NOT NULL,
    UPDATED_BY VARCHAR(32) NOT NULL

);
ALTER TABLE GNL_EMAIL_OUTBOX ADD CONSTRAINT GNL_EMAIL_OUTBOX_FK1 FOREIGN KEY (EMAIL_ID) REFERENCES GNL_EMAIL(ID);

CREATE TABLE GNL_EMAIL_INBOX
(
    ID             BIGINT PRIMARY KEY AUTO_INCREMENT,
    EMAIL_ID       BIGINT      NOT NULL,
    RECIPIENT      VARCHAR(32) NOT NULL,
    RECIPIENT_TYPE VARCHAR(16) NOT NULL,
    IS_READ        CHAR(1)     NOT NULL,
    STATUS         VARCHAR(16) NOT NULL,
    CREATED_AT     DATETIME    NOT NULL,
    CREATED_BY     VARCHAR(32) NOT NULL,
    UPDATED_AT     DATETIME    NOT NULL,
    UPDATED_BY     VARCHAR(32) NOT NULL,
    INDEX GNL_EMAIL_INBOX_IDX1(RECIPIENT),
    UNIQUE GNL_EMAIL_INBOX_UK1(EMAIL_ID, RECIPIENT)

);
ALTER TABLE GNL_EMAIL_INBOX ADD CONSTRAINT GNL_EMAIL_INBOX_FK1 FOREIGN KEY (EMAIL_ID) REFERENCES GNL_EMAIL(ID);

CREATE TABLE GNL_EMAIL_REPLY_OUTBOX
(
    ID             BIGINT PRIMARY KEY AUTO_INCREMENT,
    EMAIL_REPLY_ID BIGINT      NOT NULL,
    SENDER         VARCHAR(32) NOT NULL,
    STATUS         VARCHAR(16) NOT NULL,
    RECIPIENT      TEXT        NOT NULL,
    CREATED_AT     DATETIME    NOT NULL,
    CREATED_BY     VARCHAR(32) NOT NULL,
    UPDATED_AT     DATETIME    NOT NULL,
    UPDATED_BY     VARCHAR(32) NOT NULL

);
ALTER TABLE GNL_EMAIL_REPLY_OUTBOX
    ADD CONSTRAINT GNL_EMAIL_REPLY_OUTBOX_FK1 FOREIGN KEY (EMAIL_REPLY_ID) REFERENCES GNL_EMAIL_REPLY (ID);

CREATE TABLE GNL_EMAIL_REPLY_INBOX
(
    ID             BIGINT PRIMARY KEY AUTO_INCREMENT,
    EMAIL_REPLY_ID BIGINT      NOT NULL,
    RECIPIENT      VARCHAR(32) NOT NULL,
    RECIPIENT_TYPE VARCHAR(16) NOT NULL,
    IS_READ        CHAR(1)     NOT NULL,
    STATUS         VARCHAR(16) NOT NULL,
    CREATED_AT     DATETIME    NOT NULL,
    CREATED_BY     VARCHAR(32) NOT NULL,
    UPDATED_AT     DATETIME    NOT NULL,
    UPDATED_BY     VARCHAR(32) NOT NULL,
    INDEX GNL_EMAIL_REPLY_INBOX_IDX1 (RECIPIENT),
    UNIQUE GNL_EMAIL_INBOX_UK1(EMAIL_REPLY_ID, RECIPIENT)
);

CREATE TABLE GNL_EMAIL_REPLY_ATTACHMENT
(
    ID             BIGINT PRIMARY KEY AUTO_INCREMENT,
    EMAIL_REPLY_ID BIGINT       NOT NULL,
    FILE_NAME      VARCHAR(128) NOT NULL,
    FILE_NET_ID    BIGINT       NOT NULL,
    CREATED_AT     DATETIME     NOT NULL,
    CREATED_BY     VARCHAR(32)  NOT NULL,
    UPDATED_AT     DATETIME     NOT NULL,
    UPDATED_BY     VARCHAR(32)  NOT NULL
);
ALTER TABLE GNL_EMAIL_REPLY_ATTACHMENT
    ADD CONSTRAINT EMAIL_REPLY_ID_FK FOREIGN KEY (EMAIL_REPLY_ID) REFERENCES GNL_EMAIL_REPLY (ID);
#
# Quartz seems to work best with the driver mm.mysql-2.0.7-bin.jar
#
# PLEASE consider using mysql with innodb tables to avoid locking issues
#
# In your Quartz properties file, you'll need to set
# org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#

DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;


CREATE TABLE QRTZ_JOB_DETAILS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    JOB_NAME  VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    JOB_CLASS_NAME   VARCHAR(250) NOT NULL,
    IS_DURABLE VARCHAR(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
);

CREATE TABLE QRTZ_TRIGGERS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    JOB_NAME  VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT(13) NULL,
    PREV_FIRE_TIME BIGINT(13) NULL,
    PRIORITY INTEGER NULL,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT(13) NOT NULL,
    END_TIME BIGINT(13) NULL,
    CALENDAR_NAME VARCHAR(200) NULL,
    MISFIRE_INSTR SMALLINT(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
);

CREATE TABLE QRTZ_SIMPLE_TRIGGERS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT(7) NOT NULL,
    REPEAT_INTERVAL BIGINT(12) NOT NULL,
    TIMES_TRIGGERED BIGINT(10) NOT NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CRON_TRIGGERS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(200) NOT NULL,
    TIME_ZONE_ID VARCHAR(80),
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_SIMPROP_TRIGGERS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1 VARCHAR(512) NULL,
    STR_PROP_2 VARCHAR(512) NULL,
    STR_PROP_3 VARCHAR(512) NULL,
    INT_PROP_1 INT NULL,
    INT_PROP_2 INT NULL,
    LONG_PROP_1 BIGINT NULL,
    LONG_PROP_2 BIGINT NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR(1) NULL,
    BOOL_PROP_2 VARCHAR(1) NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_BLOB_TRIGGERS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CALENDARS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    CALENDAR_NAME  VARCHAR(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
);

CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_GROUP  VARCHAR(200) NOT NULL,
    PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
);

CREATE TABLE QRTZ_FIRED_TRIGGERS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT(13) NOT NULL,
    SCHED_TIME BIGINT(13) NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(200) NULL,
    JOB_GROUP VARCHAR(200) NULL,
    IS_NONCONCURRENT VARCHAR(1) NULL,
    REQUESTS_RECOVERY VARCHAR(1) NULL,
    PRIMARY KEY (SCHED_NAME,ENTRY_ID)
);

CREATE TABLE QRTZ_SCHEDULER_STATE
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT(13) NOT NULL,
    CHECKIN_INTERVAL BIGINT(13) NOT NULL,
    PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
);

CREATE TABLE QRTZ_LOCKS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME  VARCHAR(40) NOT NULL,
    PRIMARY KEY (SCHED_NAME,LOCK_NAME)
);


commit;
